package audio_test

import (
	"fmt"
	"math"
	"os"
	"testing"

	audio "github.com/deepankarm/pcm-to-opus/pkg"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"gopkg.in/hraban/opus.v2"
)

func TestCommons(t *testing.T) {
	RegisterFailHandler(Fail)
	RunSpecs(t, "Commons Test Suite")
}

func GenerateSineWave(frequency, sampleRate, durationSeconds, amplitude int) []int16 {
	numSamples := sampleRate * durationSeconds
	pcm := make([]int16, numSamples)
	for i := 0; i < numSamples; i++ {
		sample := float64(amplitude) * math.Sin(2*math.Pi*float64(frequency)*float64(i)/float64(sampleRate))
		pcm[i] = int16(sample)
	}
	return pcm
}

var _ = Describe("Common utilities for audio processing", func() {
	Context("Get opus frames from PCM for a generated sine wave", func() {
		It("should return opus compatible frames and encode it correctly", func() {
			channels := 1
			sampleRate := 24000
			durationSeconds := 5
			frequency := 440
			amplitude := 32767

			pcm := GenerateSineWave(frequency, sampleRate, durationSeconds, amplitude)
			frames, err := audio.GetOpusCompatibleFrames(pcm, channels, sampleRate)
			Expect(err).To(BeNil())

			enc, err := opus.NewEncoder(sampleRate, channels, opus.AppVoIP)
			Expect(err).To(BeNil())

			for _, frame := range frames {
				encodedAudio := make([]byte, 1000)
				n, err := enc.Encode(frame, encodedAudio)
				Expect(err).To(BeNil())
				Expect(n).To(BeNumerically(">", 0))

				_, err = audio.GetFrameSizeInMS(frame, channels, sampleRate)
				Expect(err).To(BeNil())
			}
		})
	})

	Context("Get opus frames from PCM for a pcm file generated by elevenlabs from a post request", func() {
		It("should return opus compatible frames and encode it correctly", func() {
			channels := 1
			sampleRate := 24000

			fileLocation := "../test/data/elevenlabs_post.pcm"
			pcmBytes, err := os.ReadFile(fileLocation)
			Expect(err).To(BeNil())

			pcm, err := audio.ConvertToPCM(pcmBytes)
			Expect(err).To(BeNil())
			Expect(len(pcm)).To(Equal(len(pcmBytes) / 2))

			frames, err := audio.GetOpusCompatibleFrames(pcm, channels, sampleRate)
			Expect(err).To(BeNil())
			fmt.Println("number of frames:", len(frames))

			enc, err := opus.NewEncoder(sampleRate, channels, opus.AppVoIP)
			Expect(err).To(BeNil())

			for _, frame := range frames {
				encodedAudio := make([]byte, 1000)
				n, err := enc.Encode(frame, encodedAudio)
				Expect(err).To(BeNil())
				Expect(n).To(BeNumerically(">", 0))

				_, err = audio.GetFrameSizeInMS(frame, channels, sampleRate)
				Expect(err).To(BeNil())
			}
		})
	})

	Context("Get opus frames from PCM for a pcm file generated by elevenlabs from a websocket request", func() {
		It("should return opus compatible frames and encode it correctly", func() {
			channels := 1
			sampleRate := 24000

			fileLocation := "../test/data/elevenlabs_ws.pcm"
			pcmBytes, err := os.ReadFile(fileLocation)
			Expect(err).To(BeNil())

			pcm, err := audio.ConvertToPCM(pcmBytes)
			Expect(err).To(BeNil())
			Expect(len(pcm)).To(Equal(len(pcmBytes) / 2))

			frames, err := audio.GetOpusCompatibleFrames(pcm, channels, sampleRate)
			Expect(err).To(BeNil())
			fmt.Println("number of frames:", len(frames))

			enc, err := opus.NewEncoder(sampleRate, channels, opus.AppVoIP)
			Expect(err).To(BeNil())

			for _, frame := range frames {
				encodedAudio := make([]byte, 1000)
				n, err := enc.Encode(frame, encodedAudio)
				Expect(err).To(BeNil())
				Expect(n).To(BeNumerically(">", 0))

				_, err = audio.GetFrameSizeInMS(frame, channels, sampleRate)
				Expect(err).To(BeNil())
			}
		})
	})
})
